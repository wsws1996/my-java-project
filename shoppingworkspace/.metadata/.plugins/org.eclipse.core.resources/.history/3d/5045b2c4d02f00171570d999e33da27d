package com.shopping.service.impl;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.shopping.mapper.TbItemDescMapper;
import com.shopping.mapper.TbItemMapper;
import com.shopping.pojo.ShoppingResult;
import com.shopping.pojo.TbItem;
import com.shopping.pojo.TbItemDesc;
import com.shopping.pojo.TbItemParamExample;
import com.shopping.pojo.TbItemParamItem;
import com.shopping.pojo.TbItemParamItemExample.Criteria;
import com.shopping.service.ItemService;
import com.shopping.utils.JsonUtils;

import redis.clients.jedis.JedisCluster;

@Service
public class ItemServiceImpl implements ItemService {

	@Autowired
	private TbItemMapper itemMapper;

	private TbItemDescMapper itemDescMapper;

	@Value("${REDIS_ITEM_KEY}")
	private String REDIS_ITEM_KEY;

	@Value("${REDIS_ITEM_EXPIRE}")
	private Integer REDIS_ITEM_EXPIRE;

	@Autowired
	private JedisCluster jedisCluster;

	@Override
	public ShoppingResult getItemBaseInfo(long itemId) {
		try {
			String json = jedisCluster.get(REDIS_ITEM_KEY + ":" + itemId + ":base");
			if (!StringUtils.isBlank(json)) {
				TbItem item = JsonUtils.jsonToPojo(json, TbItem.class);
				return ShoppingResult.ok(item);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		TbItem item = itemMapper.selectByPrimaryKey(itemId);
		try {
			jedisCluster.set(REDIS_ITEM_KEY + ":" + itemId + ":base", JsonUtils.objectToJson(item));
			jedisCluster.expire(REDIS_ITEM_KEY + ":" + itemId + ":base", REDIS_ITEM_EXPIRE);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ShoppingResult.ok(item);
	}

	@Override
	public ShoppingResult getItemDesc(long itemId) {
		try {
			String json = jedisCluster.get(REDIS_ITEM_KEY + ":" + itemId + ":desc");
			if (!StringUtils.isBlank(json)) {
				TbItemDesc itemDesc = JsonUtils.jsonToPojo(json, TbItemDesc.class);
				return ShoppingResult.ok(itemDesc);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		TbItemDesc itemDesc = itemDescMapper.selectByPrimaryKey(itemId);

		try {
			jedisCluster.set(REDIS_ITEM_KEY + ":" + itemId + ":desc", JsonUtils.objectToJson(itemDesc));
			jedisCluster.expire(REDIS_ITEM_KEY + ":" + itemId + ":desc", REDIS_ITEM_EXPIRE);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ShoppingResult.ok(itemDesc);
	}

	@Override
	public ShoppingResult getItemParam(long itemId) {
		try {
			String json = jedisCluster.get(REDIS_ITEM_KEY + ":" + itemId + ":param");
			if (!StringUtils.isBlank(json)) {
				TbItemParamItem paramItem = JsonUtils.jsonToPojo(json, TbItemParamItem.class);
				return ShoppingResult.ok(paramItem);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		TbItemParamExample example = new TbItemParamExample();
		com.shopping.pojo.TbItemParamExample.Criteria criteria=example.createCriteria();
		return null;
	}

}
